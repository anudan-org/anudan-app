name: Hotfix Approved Application - CERTIFY PACKAGE

on:
  workflow_dispatch:
  #push:
   #branches: [ hotfix/production_bug_fixes ]
  #pull_request:
   # branches: [ hotfix/production_bug_fixes ]
  #schedule:
   # - cron:'0/5 * * * *' 
   
jobs:  

  #https://github.com/marketplace/actions/remote-ssh-commands
  copy-to-spaces:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
    name: copy to spaces
    steps:       
      - name: artifacts downloading from spaces
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd /home/anudan/github
            ls -a
            #!/bin/bash
            TAG_NO_1=`cat release.json | cut -d "," -f2 | cut -d ":" -f2 | sed 's/"//g'`
            TAG_NO_2=`cat release.json | cut -d "," -f3 |cut -d ":" -f2 | sed 's/"//g' |sed 's/}//g'`
            BuildNo=$TAG_NO_1-HF-$TAG_NO_2
            SRC=dist/
            /home/anudan/github/s3cmd/s3cmd-2.0.1/s3cmd -r put dist s3://anudan-hotfix-artifacts-test/"$BuildNo"/;
            SRC=*.jar
            /home/anudan/github/s3cmd/s3cmd-2.0.1/s3cmd -r put $SRC s3://anudan-hotfix-artifacts-test/"$BuildNo"/;
            SRC=application.yaml
            /home/anudan/github/s3cmd/s3cmd-2.0.1/s3cmd -r put $SRC s3://anudan-hotfix-artifacts-test/"$BuildNo"/;
            SRC=release.json
            /home/anudan/github/s3cmd/s3cmd-2.0.1/s3cmd -r put $SRC s3://anudan-hotfix-artifacts-test/"$BuildNo"/;
          host: ${{ secrets.HOST_HOTFIX  }}
          user: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_DEPLOY_KEY }}     

  Release-repo-checkout:
      runs-on: ubuntu-latest 
      if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
      name: Release repo checkout
      steps: 
      - uses: actions/checkout@v2
        with:
          repository: jayanth9652/release   
          token: ${{ secrets.MY_PAT }}
          ref: master
          #persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          #fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
      - name: creating release.json artifact for tagging master branch
        uses: actions/upload-artifact@v2
        with:
          name: Anudan-Release
          path: release.json
          retention-days: 30          
     
  Tag-Frontend-Master-Branch:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
    needs: [Release-repo-checkout]
    name: Tag Frontend Master Branch
    steps:
    - name: check out anudan-app master
      uses: actions/checkout@master
      with:
          repository: jayanth9652/anudan-app  
          token: ${{ secrets.MY_PAT }} 
          ref: hotfix/production_bug_fixes
    - name: Anudan Release artifact downloading      
      uses: actions/download-artifact@v2
      with:
        name: Anudan-Release
    - name: Create local changes
      run: |
            pwd
            ls -lrt
    - name: Commit Tag
      run: |
          
          # retrieve branch name
          BRANCH_NAME=$(git branch | sed -n '/\* /s///p')

          # remove prefix release
          REGEXP_RELEASE="release\/"
          VERSION_BRANCH=$(echo "$BRANCH_NAME" | sed "s/$REGEXP_RELEASE//") 
          echo "Current version branch is $VERSION_BRANCH"
          TAG_NO_1=`cat release.json | cut -d "," -f2 | cut -d ":" -f2 | sed 's/"//g'`
          TAG_NO_2=`cat release.json | cut -d "," -f3 |cut -d ":" -f2 | sed 's/"//g' |sed 's/}//g'`
          echo $TAG_NO
          git config --local user.email "karniprabhu7777@gmail.com"
          git config --local user.name "jayanth9652"
          git tag $TAG_NO_1-HF-$TAG_NO_2
          git push origin hotfix/production_bug_fixes $TAG_NO_1-HF-$TAG_NO_2  

  Merging-production-Release-version-Frontend-to-Dev-Frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
    needs: [Release-repo-checkout]
    name: Merging production Release version Frontend to Dev Frontend
    steps:
     - name: check out anudan-app master
       uses: actions/checkout@master
       with:
            repository: jayanth9652/anudan-app
            token: ${{ secrets.MY_PAT }} 
            fetch-depth: 0
            
     - name: Anudan Release artifact downloading      
       uses: actions/download-artifact@v2
       with:
        name: Anudan-Release
     - name: Create local changes
       run: |
            pwd
            ls -lrt  
     - name: merging production branch to Dev Frontend
       run: | 
        TAG_NO=`cat release.json | cut -d "," -f2 | cut -d ":" -f2 | sed 's/"//g'`
        git config --local user.email "karniprabhu7777@gmail.com"
        git config --local user.name "jayanth9652"
        git checkout branch_$TAG_NO
        git checkout dev 
        git merge branch_$TAG_NO
        echo 'release.json' >> .gitignore
        git add . 
        git commit -m "Merging production Release-version Frontend to dev frontend"
        git push origin dev        


  Tag-Backend-Master-Branch:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
    needs: [Release-repo-checkout]
    name: Tag Backend Master Branch
    steps:
    - name: check out gms-service master
      uses: actions/checkout@master
      with:
          repository: jayanth9652/gms-service 
          token: ${{ secrets.MY_PAT }} 
          ref: hotfix/production_bug_fixes

    - name: Anudan Release artifact downloading      
      uses: actions/download-artifact@v2
      with:
        name: Anudan-Release
    - name: Create local changes
      run: |
            pwd
            ls -lrt
    - name: Commit Tag
      run: |
          
          # retrieve branch name
          BRANCH_NAME=$(git branch | sed -n '/\* /s///p')

          # remove prefix release
          REGEXP_RELEASE="release\/"
          VERSION_BRANCH=$(echo "$BRANCH_NAME" | sed "s/$REGEXP_RELEASE//") 
          echo "Current version branch is $VERSION_BRANCH"
          TAG_NO_1=`cat release.json | cut -d "," -f2 | cut -d ":" -f2 | sed 's/"//g'`
          TAG_NO_2=`cat release.json | cut -d "," -f3 |cut -d ":" -f2 | sed 's/"//g' |sed 's/}//g'`
          echo $TAG_NO
          git config --local user.email "karniprabhu7777@gmail.com"
          git config --local user.name "jayanth9652"
          git tag $TAG_NO_1-HF-$TAG_NO_2 
          git push origin hotfix/production_bug_fixes $TAG_NO_1-HF-$TAG_NO_2   

  Merging-production-Release-version-Frontend-to-Dev-Backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
    needs: [Release-repo-checkout]
    name: Merging production Release version Frontend to Dev Backend
    steps:
     - name: check out gms-service master
       uses: actions/checkout@master
       with:
            repository: jayanth9652/gms-service
            token: ${{ secrets.MY_PAT }} 
            fetch-depth: 0
            
     - name: Anudan Release artifact downloading      
       uses: actions/download-artifact@v2
       with:
        name: Anudan-Release
     - name: Create local changes
       run: |
            pwd
            ls -lrt  
     - name: merging production branch to Dev Backend
       run: | 
        TAG_NO=`cat release.json | cut -d "," -f2 | cut -d ":" -f2 | sed 's/"//g'`
        git config --local user.email "karniprabhu7777@gmail.com"
        git config --local user.name "jayanth9652"
        git checkout branch_$TAG_NO
        git checkout dev 
        git merge branch_$TAG_NO
        echo 'release.json' >> .gitignore
        git add . 
        git commit -m "Merging production Release-version Backend to dev Backend"
        git push origin dev         

  Notify-on-email:
    runs-on: ubuntu-latest
    if: always()
    needs: [copy-to-spaces, Release-repo-checkout, Tag-Frontend-Master-Branch, Merging-production-Release-version-Frontend-to-Dev-Frontend, Tag-Backend-Master-Branch,  Merging-production-Release-version-Frontend-to-Dev-Backend]
    name: EmailNotify
    steps:
      - name: Anudan Release artifact downloading      
        uses: actions/download-artifact@v2
        with:
          name: Anudan-Release 

      - name: set env variable with bash expression 
        run:   |
         ls -lrt
         TAG_NO_1=`cat release.json | cut -d "," -f2 | cut -d ":" -f2 | sed 's/"//g'`
         TAG_NO_2=`cat release.json | cut -d "," -f3 |cut -d ":" -f2 | sed 's/"//g' |sed 's/}//g'`
         echo "Hotfix_Release=$TAG_NO_1-HF-$TAG_NO_2" >> $GITHUB_ENV
      - name: Send some mail
        uses: wadeww/send-email-action@master
        with:
          server_address: smtp.gmail.com
          port: ${{ secrets.SMTP_SERVER_PORT }}
          username: ${{ secrets.AUTH_USER }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Hotfix Approved Application - CERTIFY PACKAGE Workflow Finished
          body: ${{github.repository}} 


                1) copy to spaces - ${{needs.copy-to-spaces.result}} 


                2) Release repo checkout - ${{needs.Release-repo-checkout.result}} 


                3) Tag Frontend Master Branch - ${{needs.Tag-Frontend-Master-Branch.result}}


                4) Merging production Release version Frontend to Dev Frontend - ${{needs.Merging-production-Release-version-Frontend-to-Dev-Frontend.result}}


                5) Tag Backend Master Branch - ${{needs.Tag-Backend-Master-Branch.result}}


                6) Merging production Release version Backend to Dev backend - ${{needs.Merging-production-Release-version-Frontend-to-Dev-Backend.result}} 


                7)  Anudan - Grant Management System â€º Hotfix Approved - ${{ env.Hotfix_Release }}
                 
          to: prabhu@socialalpha.org
          from: donotreply@anudan.org        

            